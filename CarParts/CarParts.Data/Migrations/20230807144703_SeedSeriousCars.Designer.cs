// <auto-generated />
using System;
using CarParts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarParts.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230807144703_SeedSeriousCars")]
    partial class SeedSeriousCars
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarParts.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bcb4f072-ecca-43c9-ab26-c060c6f364e4",
                            AccessFailedCount = 0,
                            Balance = 9999999.0,
                            ConcurrencyStamp = "e4f635ee-e790-49f0-9309-97c845231aa0",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "ADMINISTRATOR",
                            LastName = "ADMINISTRATOR",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7zGMVr4Al85UyD+vVF4yuOqRUDT3h1/Oyy2AnvsqRVgfD39Vcl0RLg+XhTI2YT0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65e814d6-25e9-4af8-bd37-8b99c79cda4f",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"), 1L, 1);

                    b.Property<double>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<double>("EngineSize")
                        .HasColumnType("float");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Horsepower")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("RentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("RentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TopSpeed")
                        .HasColumnType("float");

                    b.Property<double>("Torque")
                        .HasColumnType("float");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealerId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("RenterId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 178,
                            Acceleration = 4.9000000000000004,
                            CategoryId = 1,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAdd",
                            EngineSize = 2999.0,
                            FuelConsumption = 0.69999999999999996,
                            FuelTypeId = 4,
                            Horsepower = 365.0,
                            ImageUrl = "https://www.auto-data.net/images/f94/Mercedes-Benz-S-class-W223.jpg",
                            Make = "Mercedes-Benz",
                            Model = "S-Class (W223)",
                            Price = 175000.0,
                            RentPrice = 700.0,
                            TopSpeed = 250.0,
                            Torque = 500.0,
                            TransmissionId = 1,
                            Weight = 2345.0,
                            Year = 2022
                        },
                        new
                        {
                            CarId = 179,
                            Acceleration = 12.9,
                            CategoryId = 3,
                            Color = "black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1896.0,
                            FuelConsumption = 6.5,
                            FuelTypeId = 1,
                            Horsepower = 90.0,
                            ImageUrl = "https://www.auto-data.net/images/f118/Volkswagen-Golf-V.jpg",
                            Make = "VW",
                            Model = "Golf 5",
                            Price = 6200.0,
                            RentPrice = 40.0,
                            TopSpeed = 176.0,
                            Torque = 210.0,
                            TransmissionId = 1,
                            Weight = 1285.0,
                            Year = 2004
                        },
                        new
                        {
                            CarId = 180,
                            Acceleration = 10.1,
                            CategoryId = 3,
                            Color = "Red",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2993.0,
                            FuelConsumption = 5.5999999999999996,
                            FuelTypeId = 2,
                            Horsepower = 110.0,
                            ImageUrl = "https://www.auto-data.net/images/f76/Skoda-Fabia-III-facelift-2018.jpg",
                            Make = "Skoda",
                            Model = "Fabia III",
                            Price = 24000.0,
                            RentPrice = 130.0,
                            TopSpeed = 195.0,
                            Torque = 200.0,
                            TransmissionId = 2,
                            Weight = 1957.0,
                            Year = 2018
                        },
                        new
                        {
                            CarId = 181,
                            Acceleration = 6.7999999999999998,
                            CategoryId = 4,
                            Color = "Dark blue",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 3456.0,
                            FuelConsumption = 11.699999999999999,
                            FuelTypeId = 2,
                            Horsepower = 290.0,
                            ImageUrl = "https://www.auto-data.net/images/f28/file9510003.jpg",
                            Make = "Lexus",
                            Model = "RX IV",
                            Price = 85000.0,
                            RentPrice = 220.0,
                            TopSpeed = 200.0,
                            Torque = 363.0,
                            TransmissionId = 1,
                            Weight = 2025.0,
                            Year = 2016
                        },
                        new
                        {
                            CarId = 182,
                            Acceleration = 9.5,
                            CategoryId = 1,
                            Color = "White",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1999.0,
                            FuelConsumption = 10.800000000000001,
                            FuelTypeId = 2,
                            Horsepower = 145.0,
                            ImageUrl = "https://www.auto-data.net/images/f88/Volvo-S40-II-facelift-2007.jpg",
                            Make = "Volvo",
                            Model = "S40 II",
                            Price = 4800.0,
                            RentPrice = 75.0,
                            TopSpeed = 200.0,
                            Torque = 185.0,
                            TransmissionId = 2,
                            Weight = 1370.0,
                            Year = 2011
                        },
                        new
                        {
                            CarId = 183,
                            Acceleration = 10.699999999999999,
                            CategoryId = 5,
                            Color = "Red",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2993.0,
                            FuelConsumption = 10.1,
                            FuelTypeId = 2,
                            Horsepower = 163.0,
                            ImageUrl = "https://www.auto-data.net/images/f56/Kia-Optima-IV-Sportswagon-facelift-2018.jpg",
                            Make = "Kia",
                            Model = "Optima IV",
                            Price = 3900.0,
                            RentPrice = 360.0,
                            TopSpeed = 205.0,
                            Torque = 196.0,
                            TransmissionId = 1,
                            Weight = 1625.0,
                            Year = 2018
                        },
                        new
                        {
                            CarId = 184,
                            Acceleration = 6.4000000000000004,
                            CategoryId = 1,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2993.0,
                            FuelConsumption = 9.0,
                            FuelTypeId = 1,
                            Horsepower = 286.0,
                            ImageUrl = "https://i.pinimg.com/originals/51/62/d5/5162d58a4f273c8ce26544da15659b5d.jpg",
                            Make = "BMW",
                            Model = "E60",
                            Price = 18500.0,
                            RentPrice = 190.0,
                            TopSpeed = 250.0,
                            Torque = 580.0,
                            TransmissionId = 1,
                            Weight = 1660.0,
                            Year = 2010
                        },
                        new
                        {
                            CarId = 185,
                            Acceleration = 5.0999999999999996,
                            CategoryId = 2,
                            Color = "White",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2997.0,
                            FuelConsumption = 14.6,
                            FuelTypeId = 2,
                            Horsepower = 330.0,
                            ImageUrl = "https://media.suara.com/pictures/653x366/2019/05/23/91189-toyota-supra-mk4.jpg",
                            Make = "Toyota",
                            Model = "Supra",
                            Price = 60000.0,
                            RentPrice = 300.0,
                            TopSpeed = 250.0,
                            Torque = 440.0,
                            TransmissionId = 2,
                            Weight = 1570.0,
                            Year = 1993
                        },
                        new
                        {
                            CarId = 186,
                            Acceleration = 5.7000000000000002,
                            CategoryId = 3,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1984.0,
                            FuelConsumption = 12.4,
                            FuelTypeId = 2,
                            Horsepower = 265.0,
                            ImageUrl = "https://www.ilr-carbon.com/1603-large_default/audi-a3-s3-8p-3-dr-rear-spoiler-rs3-style.jpg",
                            Make = "Audi",
                            Model = "S3 8P",
                            Price = 15400.0,
                            RentPrice = 210.0,
                            TopSpeed = 250.0,
                            Torque = 350.0,
                            TransmissionId = 2,
                            Weight = 1455.0,
                            Year = 2006
                        },
                        new
                        {
                            CarId = 187,
                            Acceleration = 6.9000000000000004,
                            CategoryId = 6,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2996.0,
                            FuelConsumption = 11.800000000000001,
                            FuelTypeId = 2,
                            Horsepower = 272.0,
                            ImageUrl = "https://www.auto-data.net/images/f37/BMW-6-Series-Convertible-E64-facelift-2007.jpg",
                            Make = "BMW",
                            Model = "E64",
                            Price = 24000.0,
                            RentPrice = 260.0,
                            TopSpeed = 250.0,
                            Torque = 320.0,
                            TransmissionId = 2,
                            Weight = 1740.0,
                            Year = 2007
                        },
                        new
                        {
                            CarId = 188,
                            Acceleration = 7.2000000000000002,
                            CategoryId = 2,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription 330cd",
                            EngineSize = 2993.0,
                            FuelConsumption = 9.0999999999999996,
                            FuelTypeId = 1,
                            Horsepower = 204.0,
                            ImageUrl = "https://cloud.leparking.fr/2021/09/07/00/14/bmw-serie-3-coupe-bmw-e46-330cd-coupe-manual-rare-colour-xenons-satnav-heated-seats-bleu_8263957425.jpg",
                            Make = "BMW",
                            Model = "E46",
                            Price = 8100.0,
                            RentPrice = 150.0,
                            TopSpeed = 250.0,
                            Torque = 410.0,
                            TransmissionId = 2,
                            Weight = 1540.0,
                            Year = 2003
                        },
                        new
                        {
                            CarId = 189,
                            Acceleration = 10.199999999999999,
                            CategoryId = 8,
                            Color = "White",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2231.0,
                            FuelConsumption = 8.3000000000000007,
                            FuelTypeId = 1,
                            Horsepower = 136.0,
                            ImageUrl = "https://d1gymyavdvyjgt.cloudfront.net/drive/images/made/drive/images/remote/https_ssl.caranddriving.com/f2/images/used/big/toycorollaverso%202006_750_500_70.jpg",
                            Make = "Toyota",
                            Model = "Corolla Verso II",
                            Price = 6800.0,
                            RentPrice = 70.0,
                            TopSpeed = 250.0,
                            Torque = 310.0,
                            TransmissionId = 2,
                            Weight = 1575.0,
                            Year = 2004
                        },
                        new
                        {
                            CarId = 190,
                            Acceleration = 6.0,
                            CategoryId = 2,
                            Color = "Grey",
                            DealerId = 14,
                            Description = "ToAddDescription C300",
                            EngineSize = 1991.0,
                            FuelConsumption = 8.3000000000000007,
                            FuelTypeId = 2,
                            Horsepower = 245.0,
                            ImageUrl = "https://www.auto-data.net/images/f22/file8603854.jpg",
                            Make = "Mercedes-Benz",
                            Model = "C-Class",
                            Price = 5200.0,
                            RentPrice = 135.0,
                            TopSpeed = 250.0,
                            Torque = 370.0,
                            TransmissionId = 1,
                            Weight = 1490.0,
                            Year = 2016
                        },
                        new
                        {
                            CarId = 191,
                            Acceleration = 6.7999999999999998,
                            CategoryId = 4,
                            Color = "White",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 3444.0,
                            FuelConsumption = 18.5,
                            FuelTypeId = 2,
                            Horsepower = 415.0,
                            ImageUrl = "https://www.auto-data.net/images/f109/Toyota-Land-Cruiser-J300.jpg",
                            Make = "Toyota",
                            Model = "Land Cruiser",
                            Price = 85000.0,
                            RentPrice = 190.0,
                            TopSpeed = 250.0,
                            Torque = 650.0,
                            TransmissionId = 1,
                            Weight = 2520.0,
                            Year = 2003
                        },
                        new
                        {
                            CarId = 192,
                            Acceleration = 8.5999999999999996,
                            CategoryId = 5,
                            Color = "Blue",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1995.0,
                            FuelConsumption = 8.0999999999999996,
                            FuelTypeId = 1,
                            Horsepower = 163.0,
                            ImageUrl = "https://www.auto-data.net/images/f41/BMW-3-Series-Touring-E91.jpg",
                            Make = "BMW",
                            Model = "E91",
                            Price = 8200.0,
                            RentPrice = 140.0,
                            TopSpeed = 223.0,
                            Torque = 340.0,
                            TransmissionId = 2,
                            Weight = 1510.0,
                            Year = 2005
                        },
                        new
                        {
                            CarId = 193,
                            Acceleration = 6.7999999999999998,
                            CategoryId = 7,
                            Color = "Yellow",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 5657.0,
                            FuelConsumption = 18.100000000000001,
                            FuelTypeId = 2,
                            Horsepower = 345.0,
                            ImageUrl = "https://www.auto-data.net/images/f46/Dodge-Ram-1500-III-DR-DH.jpg",
                            Make = "Dodge",
                            Model = "Ram",
                            Price = 3700.0,
                            RentPrice = 330.0,
                            TopSpeed = 250.0,
                            Torque = 529.0,
                            TransmissionId = 1,
                            Weight = 1880.0,
                            Year = 2005
                        },
                        new
                        {
                            CarId = 194,
                            Acceleration = 11.1,
                            CategoryId = 4,
                            Color = "Red",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 2999.0,
                            FuelConsumption = 6.7000000000000002,
                            FuelTypeId = 2,
                            Horsepower = 90.0,
                            ImageUrl = "https://cdn3.focus.bg/autodata/i/dacia/sandero/sandero-ii-stepway/large/675829b961ab0a61241270896e202b87.jpg",
                            Make = "Dacia",
                            Model = "Sandero II Stepway",
                            Price = 9999.0,
                            RentPrice = 199.0,
                            TopSpeed = 170.0,
                            Torque = 135.0,
                            TransmissionId = 2,
                            Weight = 1023.0,
                            Year = 2013
                        },
                        new
                        {
                            CarId = 195,
                            Acceleration = 10.800000000000001,
                            CategoryId = 3,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1598.0,
                            FuelConsumption = 10.199999999999999,
                            FuelTypeId = 2,
                            Horsepower = 102.0,
                            ImageUrl = "https://static-eu.cargurus.com/images/forsale/2023/05/16/15/02/2003_mercedes-benz_a-class-pic-3974413017599453644-1024x768.jpeg",
                            Make = "Mercedes-Benz",
                            Model = "A-Class (W168)",
                            Price = 4400.0,
                            RentPrice = 110.0,
                            TopSpeed = 180.0,
                            Torque = 150.0,
                            TransmissionId = 2,
                            Weight = 1135.0,
                            Year = 1999
                        },
                        new
                        {
                            CarId = 196,
                            Acceleration = 8.0999999999999996,
                            CategoryId = 1,
                            Color = "Grey",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 1798.0,
                            FuelConsumption = 7.4000000000000004,
                            FuelTypeId = 2,
                            Horsepower = 170.0,
                            ImageUrl = "https://www.auto-data.net/images/f93/Audi-A4-B8-8K-facelift-2011.jpg",
                            Make = "Audi",
                            Model = "A4",
                            Price = 12400.0,
                            RentPrice = 180.0,
                            TopSpeed = 230.0,
                            Torque = 320.0,
                            TransmissionId = 2,
                            Weight = 1430.0,
                            Year = 2011
                        },
                        new
                        {
                            CarId = 197,
                            Acceleration = 3.6000000000000001,
                            CategoryId = 1,
                            Color = "Black",
                            DealerId = 14,
                            Description = "ToAddDescription",
                            EngineSize = 3996.0,
                            FuelConsumption = 14.4,
                            FuelTypeId = 2,
                            Horsepower = 550.0,
                            ImageUrl = "https://www.auto-data.net/images/f15/file8561600.jpg",
                            Make = "Porsche",
                            Model = "Panamera G2",
                            Price = 175000.0,
                            RentPrice = 100.0,
                            TopSpeed = 306.0,
                            Torque = 770.0,
                            TransmissionId = 1,
                            Weight = 1995.0,
                            Year = 2019
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Wagon"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cabrio"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pickup Truck"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Jeep"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.CarFuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Petrol"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.CarTransmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Automatic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manual"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.Dealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dealers");

                    b.HasData(
                        new
                        {
                            Id = 14,
                            Address = "ADMIN_ADDRESS",
                            UserId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3500)
                        .HasColumnType("nvarchar(3500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PurchaserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PartId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealerId");

                    b.HasIndex("PurchaserId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CarParts.Data.Models.PartCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("PartCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Engine"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Transmission"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Brakes"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Suspension"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Interior"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Exterior"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Electrical"
                        });
                });

            modelBuilder.Entity("CarParts.Data.Models.Review", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("UserId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserComparisonCar", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("UsersComparisonCars");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserFavoriteCar", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("UsersFavoriteCars");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserFavoritePart", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("UsersFavoriteParts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarParts.Data.Models.Car", b =>
                {
                    b.HasOne("CarParts.Data.Models.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.CarFuelType", "FuelType")
                        .WithMany("Cars")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("CarParts.Data.Models.CarTransmission", "Transmission")
                        .WithMany("Cars")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Dealer");

                    b.Navigation("FuelType");

                    b.Navigation("Renter");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("CarParts.Data.Models.Dealer", b =>
                {
                    b.HasOne("CarParts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarParts.Data.Models.Part", b =>
                {
                    b.HasOne("CarParts.Data.Models.PartCategory", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "Purchaser")
                        .WithMany()
                        .HasForeignKey("PurchaserId");

                    b.Navigation("Category");

                    b.Navigation("Dealer");

                    b.Navigation("Purchaser");
                });

            modelBuilder.Entity("CarParts.Data.Models.Review", b =>
                {
                    b.HasOne("CarParts.Data.Models.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserComparisonCar", b =>
                {
                    b.HasOne("CarParts.Data.Models.Car", "Car")
                        .WithMany("UserComparisonCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserFavoriteCar", b =>
                {
                    b.HasOne("CarParts.Data.Models.Car", "Car")
                        .WithMany("UserFavoriteCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarParts.Data.Models.UserFavoritePart", b =>
                {
                    b.HasOne("CarParts.Data.Models.Part", "Part")
                        .WithMany("UserFavoriteParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CarParts.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CarParts.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarParts.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CarParts.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarParts.Data.Models.Car", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserComparisonCars");

                    b.Navigation("UserFavoriteCars");
                });

            modelBuilder.Entity("CarParts.Data.Models.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarParts.Data.Models.CarFuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarParts.Data.Models.CarTransmission", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarParts.Data.Models.Part", b =>
                {
                    b.Navigation("UserFavoriteParts");
                });

            modelBuilder.Entity("CarParts.Data.Models.PartCategory", b =>
                {
                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
